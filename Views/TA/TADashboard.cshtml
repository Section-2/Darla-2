@{
    // Behold, the title of our epic saga!
    ViewData["Title"] = "INTEX Grading Summary";
}

@model GradingProgressViewModel

<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" />

<style>
    /* Ensuring our headers are as dark and bold as a knight's armor. */
    h1, h2 {
        color: black;
    }

    /* The quadrants, our four pillars of knowledge, standing tall in their regal attire. */
    .quadrant {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 20px;
        border: 1px solid #dee2e6;
        background-color: #f8f9fa;
        height: 100%;
    }

    /* The Grading Progress, a shining beacon of percentage, bold and grand. */
    .grading-progress {
        font-size: 60px; /* Enlarging the beacon of progress */
        font-family: 'Rubik', sans-serif; /* In the reliable hands of Rubik */
    }

    /* The Table of Grading, where the quests of assignments are listed, minus the usual fanfare of borders. */
    .grading-table, .grading-table th, .grading-table td {
        border: none;
        text-align: left;
        padding: 8px;
    }
</style>

<div class="container mt-5">
    <h1 class="text-center mb-4">@ViewData["Title"]</h1>

    <div class="row">
        <!-- The first quadrant, where numbers weave tales of grading progress -->
        <div class="col-md-6">
            <div class="quadrant">
                <h2>Grading Progress</h2>
                <p class="grading-progress" style="color: @(Model.AveragePercentage < 30 ? "#dc3545" : Model.AveragePercentage < 70 ? "#ffc107" : "#28a745");">@Math.Round(Model.AveragePercentage) %</p>
            </div>
        </div>

        <!-- The second quadrant, whispering tales of assignments yet to face the quill -->
        <div class="col-md-6">
            <div class="quadrant">
                <h2>Left To Grade</h2>
                <table class="grading-table">
                    @foreach (var classInfo in Model.ClassGradingInfos)
                    {
                        <tr>
                            <td>@classInfo.ClassCode</td>
                            <td>@classInfo.TotalGraded/@classInfo.TotalAssignments (@Math.Round(classInfo.PercentageGraded, 2) %)</td>
                        </tr>
                    }
                </table>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <!-- The third quadrant, where legends are made and the top groups are honored -->
        <div class="col-md-6">
            <div class="quadrant top-groups">
                <h2>Top 4 Groups</h2>
                <ol>
                    @{
                        // In the kingdom of Random, where groups are knighted by fate
                        Random rand = new Random();
                        var groups = Enumerable.Range(1, 4).Select(x => $"Group {rand.Next(1, 5)}-{rand.Next(1, 11)}").Distinct().Take(4).ToList();
                        foreach (var group in groups)
                        {
                            <li>@group</li>
                        }
                    }
                </ol>
            </div>
        </div>

        <!-- The final quadrant, a portal to realms of rubrics, progress, and grades -->
        <div class="col-md-6">
            <div class="quadrant">
                <a class="btn btn-primary" asp-controller="ta" asp-action="tagradingprogress">TA Grading Progress</a>
                <br />
                <a class="btn btn-primary" asp-controller="ta" asp-action="allgrades">All Grades</a>
            </div>
        </div>
    </div>
</div>

<!-- Enchanting Bootstrap spells for a smooth and responsive adventure -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.4.3/dist/js/bootstrap.bundle.min.js"></script>


<script>
    $(document).ready(function () {
        // Event listener for changing the displayed data based on the selected section.
        $('.section-sort-selector').click(function (e) {
            e.preventDefault(); // Prevent default anchor behavior.

            // Update the dropdown text to reflect the selected section.
            var selectedSection = $(this).data('sort-section');
            $('#sectionSortDropdown').text($(this).text());

            // Example data structure for grades. Extend this structure for all sections.
            var grades = {
                "Section 1": { "IS 401": 45, "IS 413": 50, "IS 414": 55, "IS 455": 60 },
            };

            // Clear the table before updating it with data from the selected section.
            $('.grading-table tbody').empty();
            if (selectedSection !== "all") {
                var sectionGrades = grades[selectedSection];
                $.each(sectionGrades, function (className, grade) {
                    $('.grading-table tbody').append(`<tr><td>${className}</td><td>${grade}/60</td></tr>`);
                });
            }
            // For 'all' section, you might want to aggregate data from all sections here.

            // Refresh the list of top 4 groups. Consider fetching this dynamically based on the selected section.
            $('.top-groups ol').empty().append('<li>Group 2-9</li>'); // Example static entry.

            // Highlight the currently active section.
            $('.section-sort-selector').removeClass('active');
            $(this).addClass('active');
        });

        // Initialize the view by simulating a click on "All Sections".
        $('.section-sort-selector[data-sort-section="all"]').click();
    });
</script>


